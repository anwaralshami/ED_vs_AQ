as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- c("20", "40", "60","80","100")
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio.wald(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
generateOdds(38)
generateOdds(33)
c(2:27,29:46)
nrow(A)
odds<-generateOdds(1)
for (i in c(2:27,29:46)){
print(i)
odds<-rbind(odds,generateOdds(i))
}
odds<-generateOdds(1)
for (i in c(2:37,39:46)){
print(i)
odds<-rbind(odds,generateOdds(i))
}
odds(39)
generateOdds(1)
generateOdds(39)
generateOdds(40)
generateOdds(41)
generateOdds(42)
generateOdds(43)
generateOdds(44)
generateOdds(45)
generateOdds(46)
odds<-generateOdds(1)
for (i in c(2:37)){
print(i)
odds<-rbind(odds,generateOdds(i))
}
View(odds)
generateOdds <- function(i) {
d0<-as.data.frame.matrix(A)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals$`n()`-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals$`n()`)-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- c("20", "40", "60","80","100")
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
odds<-generateOdds(1)
for (i in c(2:37)){
print(i)
odds<-rbind(odds,generateOdds(i))
}
View(odds)
write.csv(odds, "odds.csv")
A
A
as.data.frame(A)
B<-as.data.frame(A)
B<-as.data.frame(A)
B$l50<-B$`20`+B$`40`+floor(B$`60`)
B
B$G50<-B$`80`+B$`100`+ceiling(B$`60`)
B$g50<-B$`80`+B$`100`+ceiling(B$`60`)
B<-select(B,l50,g50)
B
generateOdds_2z <- function(i) {
d0<-as.data.frame.matrix(A)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals$`n()`-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals$`n()`)-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- c("l50","G50")
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
generateOdds_2z(1,B)
generateOdds_2z <- function(i,matDat) {
d0<-as.data.frame.matrix(matDat)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals$`n()`-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals$`n()`)-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- c("l50","G50")
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
generateOdds_2z(1,B)
tapw <- c("l50","g50")
odds2z<-generateOdds_2z(1,B)
for (i in c(2:nrow(B))){
print(i)
odds2z<-rbind(odds,generateOdds_5z(i,B))
}
odds2z<-generateOdds_2z(1,B)
for (i in c(2:nrow(B))){
print(i)
odds2z<-rbind(odds,generateOdds_2z(i,B))
}
odds2z<-generateOdds_2z(41,B)
odds2z<-generateOdds_2z(42,B)
odds2z<-generateOdds_2z(43,B)
odds2z<-generateOdds_2z(44,B)
odds2z<-generateOdds_2z(45,B)
odds2z<-generateOdds_2z(46,B)
odds2z<-generateOdds_2z(1,B)
for (i in c(2:39,43:46)){
print(i)
odds2z<-rbind(odds,generateOdds_2z(i,B))
}
View(odds2z)
totals
#rbind(odds,y)
generateOdds_5z <- function(i,matDat) {
d0<-as.data.frame.matrix(matDat)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals$`n()`-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals$`n()`)-cases[i]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- c("20", "40", "60","80","100")
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
odds<-generateOdds_5z(1,A)
odds<-generateOdds_5z(3,A)
odds<-generateOdds_5z(2,A)
#rbind(odds,y)
generateOdds_5z <- function(i,matDat) {
d0<-as.data.frame.matrix(matDat)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals$`n()`-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals$`n()`)-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- c("20", "40", "60","80","100")
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
odds<-generateOdds_5z(2,A)
#rbind(odds,y)
generateOdds_5z <- function(i,matDat,totals) {
d0<-as.data.frame.matrix(matDat)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals$`n()`-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals$`n()`)-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- c("20", "40", "60","80","100")
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
#rbind(odds,y)
generateOdds_5z <- function(i,matDat,totals,expNames) {
d0<-as.data.frame.matrix(matDat)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals$`n()`-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals$`n()`)-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- expNames
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
odds<-generateOdds_5z(2,A,totals,c("20", "40", "60","80","100"))
generateOdds_5z(2,B,totals,c("20", "40"))
tot2<-data.frame(location_exposure=c("l50","g50"),`n()`=c(100,100))
tot2
totals
#rbind(odds,y)
generateOdds_5z <- function(i,matDat,totals,expNames) {
d0<-as.data.frame.matrix(matDat)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals[2]-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals$`n()`)-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- expNames
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
totals[2,1]
totals[2]
totals[2][1]
totals[2]
totals[[2]]
totals[[2]][1]
tot2<-data.frame(location_exposure=c("l50","g50"),`n()`=c(
floor(totals[[2]][1]+totals[[2]][2]+0.5*totals[[2]][3]),
ceiling(totals[[2]][4]+totals[[2]][5]+0.5*totals[[2]][3])))
tot2
generateOdds_5z(2,B,tot2,c("20", "40"))
generateOdds_5z(1,B,tot2,c("20", "40"))
#rbind(odds,y)
generateOdds_5z <- function(i,matDat,totals,expNames) {
d0<-as.data.frame.matrix(matDat)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals[2]-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals[2])-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- expNames
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
odds<-generateOdds_5z(2,A,totals,c("20", "40", "60","80","100"))
totals[2]
as.numeric(totals[2])
totals[[2]]
#rbind(odds,y)
generateOdds_5z <- function(i,matDat,totals,expNames) {
d0<-as.data.frame.matrix(matDat)[i,]
dis<-rownames(d0)
cases <- t(d0)
colnames(cases)<-c("case")
totals[2]-cases[1]
cases<- as.data.frame(cases)
cases$batata <- as.numeric(totals[[2]])-cases[1]
as.matrix(cases)
oddsratio.midp(as.matrix(cases))
tapw <- expNames
outc <- c("Case", "Control")
dat <- as.matrix(cases)
dimnames(dat) <- list("exposure" = tapw, "Outcome" = outc)
x<-oddsratio(dat, rev="c",)
y<-as.data.frame(cbind(dat,x$measure,x$p.value))
y$exposure <- rownames(y)
y$disease <- dis
return(y)
}
odds<-generateOdds_5z(2,A,totals,c("20", "40", "60","80","100"))
generateOdds_5z(1,B,tot2,c("20", "40"))
odds2z<-generateOdds_2z(1,B,tot2,c("l50", "g50"))
for (i in c(2:39,43:46)){
print(i)
odds2z<-rbind(odds,generateOdds_2z(i,B,tot2,c("l50", "g50")))
}
odds2z<-generateOdds_5z(1,B,tot2,c("l50", "g50"))
for (i in c(2:39,43:46)){
print(i)
odds2z<-rbind(odds,generateOdds_5z(i,B,tot2,c("l50", "g50")))
}
odds2z<-generateOdds_5z(1,B,tot2,c("l50", "g50"))
for (i in c(2:39,43:46)){
print(i)
odds2z<-rbind(odds2z,generateOdds_5z(i,B,tot2,c("l50", "g50")))
}
View(odds2z)
odds<-generateOdds_5z(2,A,totals,c("20", "40", "60","80","100"))
for (i in c(2:37)){
print(i)
odds<-rbind(odds,generateOdds_5z(i,A,totals),c("20", "40", "60","80","100"))
}
write.csv(odds, "odds5z.csv")
odds<-generateOdds_5z(2,A,totals,c("20", "40", "60","80","100"))
for (i in c(2:37)){
print(i)
odds<-rbind(odds,generateOdds_5z(i,A,totals,c("20", "40", "60","80","100")))
}
write.csv(odds, "odds5z.csv")
odds2z<-generateOdds_5z(1,B,tot2,c("l50", "g50"))
for (i in c(2:39,43:46)){
print(i)
odds2z<-rbind(odds2z,generateOdds_5z(i,B,tot2,c("l50", "g50")))
}
write.csv(odds2z, "odds2z.csv")
setwd("~/genRepo/AUBMC_health_vs-AQ")
library(dplyr)
library(reshape2)
library(ggplot2)
count_08 <- read.csv("ER_adm_08_counts.csv",stringsAsFactors = F)
count_18 <- read.csv("ER_adm_18_counts.csv",stringsAsFactors = F)
count_18 %>%
select(Beta_Version_CCS_Category,Beta_Version_CCS_Category_Description,count)%>%
mutate(count = as.numeric(count))%>%
rename(CCS_Category = Beta_Version_CCS_Category,count_18 = count) -> count_18
count_08<-count_08[complete.cases(count_08),]
counts <- left_join(count_18,count_08)
counts%>%
select(Beta_Version_CCS_Category_Description,count_18,count_08)%>%
mutate(count = count_08+count_18,Beta_Version_CCS_Category_Description = as.character(Beta_Version_CCS_Category_Description))%>%
arrange(desc(count)) ->counts
order <- as.character(counts$Beta_Version_CCS_Category_Description)
counts %>%
mutate(count_18 = -as.numeric(count_18))%>%
select(-count)%>%
melt(id = "Beta_Version_CCS_Category_Description")%>%
mutate(Beta_Version_CCS_Category_Description = as.factor(Beta_Version_CCS_Category_Description))%>%
filter(value > 120|value < -120)->counts
counts$Beta_Version_CCS_Category_Description <- factor(counts$Beta_Version_CCS_Category_Description,levels = order)
#filter(!is.na(CCS_Category))%>%
p<-ggplot(counts,aes(x=Beta_Version_CCS_Category_Description, y=value, fill= variable))+
geom_bar(stat = "identity", position = "identity",width=0.6)+
geom_text(aes(label=abs(value)),vjust = ifelse(counts$value >= 0, 0.5, 0.5),size=2) +
scale_y_continuous(labels=abs)+
scale_fill_discrete(name = "ED adm year", labels = c("2018", "2008"))+
theme_light()+
xlab("CCS code")+
ylab("count")+
theme(axis.text.x = element_blank(),
axis.title = element_blank())+
coord_flip()
p
adm_18 <- read.csv("ER_adm_18.csv",stringsAsFactors = F)
adm_08 <- read.csv("ER_adm_08.csv",stringsAsFactors = F)
library(dplyr)
colnames(adm_08)
colnames(adm_18)
adm_18 <- read.csv("ER_adm_18_CCS.csv",stringsAsFactors = F)
colnames(adm_18)
adm_08 %>%
rename(CCS = CCS.CATEGORY)
adm_08 %>%
rename(CCS = CCS.CATEGORY)%>%
colnames(adm_08)
adm_08 %>%
rename(CCS = CCS.CATEGORY)%>%
colnames(adm_08)
colnames(adm_08)
adm_08 %>%
rename(CCS = CCS.CATEGORY)%>%
select(ADMISSION.DATE,AGE,SEX,CCS)->adm_08
colnames(adm_18)
adm_18$Arrived
adm_08 <- read.csv("ER_adm_08.csv",stringsAsFactors = F)
adm_18 %>%
rename(CCS = Beta_Version_CCS_Category, CCS_des = Beta_Version_CCS_Category_Description)%>%
select(Arrived,Date.of.Birth,Gender,CCS,CCS_des)->adm_18
colnames(adm_08)
adm_08 %>%
rename(CCS = CCS.CATEGORY, CCS_des = CCS.CATEGORY.DESCRIPTION)%>%
select(ADMISSION.DATE,BIRTHDATE,SEX,CCS,CCS_des)->adm_08
colnames(adm_08)
colnames(adm_18)<-colnames(adm_08)
#Align and select relevant columns
adm_08 %>%
rename(CCS = CCS.CATEGORY, CCS_des = CCS.CATEGORY.DESCRIPTION)%>%
select(ADMISSION.DATE,BIRTHDATE,SEX,CCS,CCS_des)%>%
filter(!is.na(CCS))->adm_08
#Get CCS tagged admission data for both years
adm_08 <- read.csv("ER_adm_08.csv",stringsAsFactors = F)
#Align and select relevant columns
adm_08 %>%
rename(CCS = CCS.CATEGORY, CCS_des = CCS.CATEGORY.DESCRIPTION)%>%
select(ADMISSION.DATE,BIRTHDATE,SEX,CCS,CCS_des)%>%
filter(!is.na(CCS))->adm_08
adm_18 <- read.csv("ER_adm_18_CCS.csv",stringsAsFactors = F)
adm_18 %>%
rename(CCS = Beta_Version_CCS_Category, CCS_des = Beta_Version_CCS_Category_Description)%>%
select(Arrived,Date.of.Birth,Gender,CCS,CCS_des)%>%
filter(!is.na(CCS))->adm_18
install.packages("lubridate")
library(lubridate)
#Date technical correction
adm_18$Arrived[1]
ymd_hm(adm_18$Arrived[1])
adm_18$Arrived <- ymd_hm(adm_18$Arrived)
adm_18 <- read.csv("ER_adm_18_CCS.csv",stringsAsFactors = F)
adm_18 %>%
rename(CCS = Beta_Version_CCS_Category, CCS_des = Beta_Version_CCS_Category_Description)%>%
select(Arrived,Date.of.Birth,Gender,CCS,CCS_des)%>%
filter(!is.na(CCS))->adm_18
test <- ymd_hm(adm_18$Arrived)
View(adm_18)
test <- dmy_hm(adm_18$Arrived)
test[1]
test[7]
#Get CCS tagged admission data for both years
adm_08 <- read.csv("ER_adm_08.csv",stringsAsFactors = F)
adm_18 <- read.csv("ER_adm_18_CCS.csv",stringsAsFactors = F)
#Align and select relevant columns
adm_08 %>%
rename(CCS = CCS.CATEGORY, CCS_des = CCS.CATEGORY.DESCRIPTION)%>%
select(ADMISSION.DATE,BIRTHDATE,SEX,CCS,CCS_des)%>%
filter(!is.na(CCS))->adm_08
adm_18 %>%
rename(CCS = Beta_Version_CCS_Category, CCS_des = Beta_Version_CCS_Category_Description)%>%
select(Arrived,Date.of.Birth,Gender,CCS,CCS_des)%>%
filter(!is.na(CCS))->adm_18
colnames(adm_18)<-colnames(adm_08)
#Date technical correction
adm_18$ADMISSION.DATE
test <- dmy_hm(adm_18$ADMISSION.DATE)
for (item in adm_18$ADMISSION.DATE){
dmy_hm(item)
}
i = 1
for (item in adm_18$ADMISSION.DATE){
print(i)
dmy_hm(item)
i=i+1
}
i = 1
for (item in adm_18$ADMISSION.DATE){
print0(i": ",dmy_hm(item))
i=i+1
}
i = 1
for (item in adm_18$ADMISSION.DATE){
print0(i": ",dmy_hm(item))
i=i+1
}
for (item in adm_18$ADMISSION.DATE){
print0(i,": ",dmy_hm(item))
i=i+1
}
for (item in adm_18$ADMISSION.DATE){
print(paste0(i,": ",dmy_hm(item)))
i=i+1
}
test <-adm_18
test$admDate<- dmy_hm(adm_18$ADMISSION.DATE)
View(test)
test%>%
filter(is.na(admDate))
test%>%
filter(is.na(admDate))->test2
View(test2)
test$admDate<- mdyy_hm(adm_18$ADMISSION.DATE)
test$admDate<- mdy_hm(adm_18$ADMISSION.DATE)
test$admDate<- dmy_hm(adm_18$ADMISSION.DATE)
test%>%
filter(is.na(admDate))->test2
View(test)
